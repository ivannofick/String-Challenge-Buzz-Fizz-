<?php 

namespace App\Http\Controllers;
 
use App\Http\Controllers\Controller;
use App\Models\Post;
use App\Models\Users;
 
class PostController extends Controller {


    /**
     * function for first load in website 
     * (GET) /api/post?name=
     * 
     */
    public function index(Request $request)
    {
        $input = $request->all();

        $getPost = new Post;
        if (isset($input['name'])) {
            $getPost->where('name', 'like', '%'.$input['name'].'%');
        }
        $getPost = $getPost->paginate(15);

        return response()->json($getPost, 200);
    }


    /**
     * function for login
     * (POST) /api/signup
     * 
     * 
     */
    public function signUp(Request $request)
    {
        $input $request->all();
        $validator = Validator::make($input, [
            'name' => 'required|max:25',
            'username' => 'required|unique:username|max:25',
            'password' => 'required',
        ]);
 
        if ($validator->fails()) {
            return response()->json($validator->messages(), 400);
        }

        Users::create($input);
        return response()->json('Data has been saved', 200);
    }


    /**
     * function for sigin
     * (POST)/api/login
     */
    public function login(Request $request)
    {
        $validator = Validator::make($input, [
            'username' => 'required|unique:username|max:25',
            'password' => 'required',
        ]);
 
        if ($validator->fails()) {
            return response()->json($validator->messages(), 400);
        }

        $users = Users::where('username', $input['username'])
        ->where('password', $input['password'])->first();
        return response()->json($users, 200);
    }

    /**
     * function for get post by id
     * (GET) /api/post/{$id}
     */
    public function getPost(Request $request, $id)
    {
        $input = $request->all();

        $getPost = Post::where('id', $id)->first();

        return response()->json($getPost, 200);
    }


    /**
     * function delete post on website
     * use auth for deleted post
     * (Delete) /apo/delete/{$id}
     * 
     */
    public function delPost(Request $request, $id)
    {
        $input = $request->all();

        $post = Post::find($id);
 
        $post->delete();
        return response()->json('Data has been deleted', 200);
    }


    /**
     * function show post for edited
     * use auth
     * (Delete) /apo/delete/{$id}
     * @return JSON
     */
    public function showPost(Request $request, $id)
    {
        $input = $request->all();

        $post = Post::where('id', $id)->first();

        return response()->json($post, 200);
    }

    /**
     * updated post
     * use auth
     * (POST) /apo/update/post
     * @return JSON
     */
    public function updatePost(Request $request)
    {
        $input = $request->all();
        $validator = Validator::make($input, [
            'id' => 'required',
            'title' => 'required|max:50',
            'description' => 'required',
            'banner' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048'
        ]);
 
        if ($validator->fails()) {
            return response()->json($validator->messages(), 400);
        }
        $getPost = Post::find($input['id']);
        $getPost->title = $input['title'];
        $getPost->description = $input['description'];
        [$file, $nameFile] = self::uploadFile($input['banner'], 'banner');
        $getpost->banner = $file;
        $getPost->save();

        return Response()->json('Data has been updated', 200);
    }


    /**
     * function upload file
     * @param file $file
     * @param String $fileLocation
     * @return Array 
     */
	public function uploadFile($file, $fileLocation){
 
		$nameFile = time()."_".$file->getClientOriginalName();
 
		$file->move($fileLocation, $nameFile);
 
 
        return ['banner/'.$nameFile, $nameFile];
	}


    /**
     * updated post
     * use auth
     * (POST) /apo/create/post
     * @return JSON
     */
    public function createPost(Request $request)
    {
        $input = $request->all();
        $validator = Validator::make($input, [
            'title' => 'required|max:50',
            'description' => 'required',
            'banner' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048'
        ]);
 
        if ($validator->fails()) {
            return response()->json($validator->messages(), 400);
        }
        [$file, $nameFile] = self::uploadFile($input['banner'], 'banner');
        $input['banner'] = $file;
        $getPost = Post::create($input);
        return Response()->json('Data has been created', 200);
    }
}


